{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/WINDOWS%2011/Documents/GitHub/ClientSide/Client/nextjs-dashboard/app/ui/dashboard/cards.tsx"],"sourcesContent":["import {\r\n  BanknotesIcon,\r\n  ClockIcon,\r\n  UserGroupIcon,\r\n  InboxIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport { lusitana } from '@/app/ui/fonts';\r\n\r\nconst iconMap = {\r\n  collected: BanknotesIcon,\r\n  customers: UserGroupIcon,\r\n  pending: ClockIcon,\r\n  invoices: InboxIcon,\r\n};\r\n\r\nexport default async function CardWrapper() {\r\n  return (\r\n    <>\r\n      {/* NOTE: Uncomment this code in Chapter 9 */}\r\n\r\n      {/* <Card title=\"Collected\" value={totalPaidInvoices} type=\"collected\" />\r\n      <Card title=\"Pending\" value={totalPendingInvoices} type=\"pending\" />\r\n      <Card title=\"Total Invoices\" value={numberOfInvoices} type=\"invoices\" />\r\n      <Card\r\n        title=\"Total Customers\"\r\n        value={numberOfCustomers}\r\n        type=\"customers\"\r\n      /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function Card({\r\n  title,\r\n  value,\r\n  type,\r\n}: {\r\n  title: string;\r\n  value: number | string;\r\n  type: 'invoices' | 'customers' | 'pending' | 'collected';\r\n}) {\r\n  const Icon = iconMap[type];\r\n\r\n  return (\r\n    <div className=\"rounded-xl bg-gray-50 p-2 shadow-sm\">\r\n      <div className=\"flex p-4\">\r\n        {Icon ? <Icon className=\"h-5 w-5 text-gray-700\" /> : null}\r\n        <h3 className=\"ml-2 text-sm font-medium\">{title}</h3>\r\n      </div>\r\n      <p\r\n        className={`${lusitana.className}\r\n          truncate rounded-xl bg-white px-4 py-8 text-center text-2xl`}\r\n      >\r\n        {value}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAMA;AANA;AAAA;AAAA;AAAA;AAMA;;;;AAEA,MAAM,UAAU;IACd,WAAW,yNAAA,CAAA,gBAAa;IACxB,WAAW,yNAAA,CAAA,gBAAa;IACxB,SAAS,iNAAA,CAAA,YAAS;IAClB,UAAU,iNAAA,CAAA,YAAS;AACrB;AAEe,eAAe;IAC5B,qBACE;AAaJ;AAEO,SAAS,KAAK,EACnB,KAAK,EACL,KAAK,EACL,IAAI,EAKL;IACC,MAAM,OAAO,OAAO,CAAC,KAAK;IAE1B,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;oBACZ,qBAAO,8OAAC;wBAAK,WAAU;;;;;+BAA6B;kCACrD,8OAAC;wBAAG,WAAU;kCAA4B;;;;;;;;;;;;0BAE5C,8OAAC;gBACC,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC;qEAC4B,CAAC;0BAE7D;;;;;;;;;;;;AAIT"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/WINDOWS%2011/Documents/GitHub/ClientSide/Client/nextjs-dashboard/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\r\n\r\nexport const formatCurrency = (amount: number) => {\r\n  return (amount / 100).toLocaleString('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n};\r\n\r\nexport const formatDateToLocal = (\r\n  dateStr: string,\r\n  locale: string = 'en-US',\r\n) => {\r\n  const date = new Date(dateStr);\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    day: 'numeric',\r\n    month: 'short',\r\n    year: 'numeric',\r\n  };\r\n  const formatter = new Intl.DateTimeFormat(locale, options);\r\n  return formatter.format(date);\r\n};\r\n\r\nexport const generateYAxis = (revenue: Revenue[]) => {\r\n  // Calculate what labels we need to display on the y-axis\r\n  // based on highest record and in 1000s\r\n  const yAxisLabels = [];\r\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\r\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\r\n\r\n  for (let i = topLabel; i >= 0; i -= 1000) {\r\n    yAxisLabels.push(`$${i / 1000}K`);\r\n  }\r\n\r\n  return { yAxisLabels, topLabel };\r\n};\r\n\r\nexport const generatePagination = (currentPage: number, totalPages: number) => {\r\n  // If the total number of pages is 7 or less,\r\n  // display all pages without any ellipsis.\r\n  if (totalPages <= 7) {\r\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\r\n  }\r\n\r\n  // If the current page is among the first 3 pages,\r\n  // show the first 3, an ellipsis, and the last 2 pages.\r\n  if (currentPage <= 3) {\r\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\r\n  }\r\n\r\n  // If the current page is among the last 3 pages,\r\n  // show the first 2, an ellipsis, and the last 3 pages.\r\n  if (currentPage >= totalPages - 2) {\r\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\r\n  }\r\n\r\n  // If the current page is somewhere in the middle,\r\n  // show the first page, an ellipsis, the current page and its neighbors,\r\n  // another ellipsis, and the last page.\r\n  return [\r\n    1,\r\n    '...',\r\n    currentPage - 1,\r\n    currentPage,\r\n    currentPage + 1,\r\n    '...',\r\n    totalPages,\r\n  ];\r\n};\r\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/WINDOWS%2011/Documents/GitHub/ClientSide/Client/nextjs-dashboard/app/ui/dashboard/revenue-chart.tsx"],"sourcesContent":["import { generateYAxis } from '@/app/lib/utils';\r\nimport { CalendarIcon } from '@heroicons/react/24/outline';\r\nimport { lusitana } from '@/app/ui/fonts';\r\nimport { Revenue } from '@/app/lib/definitions';\r\n\r\n// This component is representational only.\r\n// For data visualization UI, check out:\r\n// https://www.tremor.so/\r\n// https://www.chartjs.org/\r\n// https://airbnb.io/visx/\r\n\r\nexport default async function RevenueChart({\r\n  revenue,\r\n}: {\r\n  revenue: Revenue[];\r\n}) {\r\n  const chartHeight = 350;\r\n  // NOTE: Uncomment this code in Chapter 7\r\n\r\n  const { yAxisLabels, topLabel } = generateYAxis(revenue);\r\n\r\n  if (!revenue || revenue.length === 0) {\r\n    return <p className=\"mt-4 text-gray-400\">No data available.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full md:col-span-4\">\r\n      <h2 className={`${lusitana.className} mb-4 text-xl md:text-2xl`}>\r\n        Recent Revenue\r\n      </h2>\r\n      {/* NOTE: Uncomment this code in Chapter 7 */}\r\n\r\n      <div className=\"rounded-xl bg-gray-50 p-4\">\r\n        <div className=\"sm:grid-cols-13 mt-0 grid grid-cols-12 items-end gap-2 rounded-md bg-white p-4 md:gap-4\">\r\n          <div\r\n            className=\"mb-6 hidden flex-col justify-between text-sm text-gray-400 sm:flex\"\r\n            style={{ height: `${chartHeight}px` }}\r\n          >\r\n            {yAxisLabels.map((label) => (\r\n              <p key={label}>{label}</p>\r\n            ))}\r\n          </div>\r\n\r\n          {revenue.map((month) => (\r\n            <div key={month.month} className=\"flex flex-col items-center gap-2\">\r\n              <div\r\n                className=\"w-full rounded-md bg-blue-300\"\r\n                style={{\r\n                  height: `${(chartHeight / topLabel) * month.revenue}px`,\r\n                }}\r\n              ></div>\r\n              <p className=\"-rotate-90 text-sm text-gray-400 sm:rotate-0\">\r\n                {month.month}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"flex items-center pb-2 pt-6\">\r\n          <CalendarIcon className=\"h-5 w-5 text-gray-500\" />\r\n          <h3 className=\"ml-2 text-sm text-gray-500 \">Last 12 months</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;AAAA;AADA;;;;;AAUe,eAAe,aAAa,EACzC,OAAO,EAGR;IACC,MAAM,cAAc;IACpB,yCAAyC;IAEzC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,mHAAA,CAAA,gBAAa,AAAD,EAAE;IAEhD,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;QACpC,qBAAO,8OAAC;YAAE,WAAU;sBAAqB;;;;;;IAC3C;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC;0BAAE;;;;;;0BAKjE,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCACC,WAAU;gCACV,OAAO;oCAAE,QAAQ,GAAG,YAAY,EAAE,CAAC;gCAAC;0CAEnC,YAAY,GAAG,CAAC,CAAC,sBAChB,8OAAC;kDAAe;uCAAR;;;;;;;;;;4BAIX,QAAQ,GAAG,CAAC,CAAC,sBACZ,8OAAC;oCAAsB,WAAU;;sDAC/B,8OAAC;4CACC,WAAU;4CACV,OAAO;gDACL,QAAQ,GAAG,AAAC,cAAc,WAAY,MAAM,OAAO,CAAC,EAAE,CAAC;4CACzD;;;;;;sDAEF,8OAAC;4CAAE,WAAU;sDACV,MAAM,KAAK;;;;;;;mCARN,MAAM,KAAK;;;;;;;;;;;kCAazB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,uNAAA,CAAA,eAAY;gCAAC,WAAU;;;;;;0CACxB,8OAAC;gCAAG,WAAU;0CAA8B;;;;;;;;;;;;;;;;;;;;;;;;AAKtD"}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/WINDOWS%2011/Documents/GitHub/ClientSide/Client/nextjs-dashboard/app/ui/dashboard/latest-invoices.tsx"],"sourcesContent":["import { ArrowPathIcon } from '@heroicons/react/24/outline';\r\nimport clsx from 'clsx';\r\nimport Image from 'next/image';\r\nimport { lusitana } from '@/app/ui/fonts';\r\nimport { LatestInvoice } from '@/app/lib/definitions';\r\nexport default async function LatestInvoices({\r\n  latestInvoices,\r\n}: {\r\n  latestInvoices: LatestInvoice[];\r\n}) {\r\n  return (\r\n    <div className=\"flex w-full flex-col md:col-span-4\">\r\n      <h2 className={`${lusitana.className} mb-4 text-xl md:text-2xl`}>\r\n        Latest Invoices\r\n      </h2>\r\n      <div className=\"flex grow flex-col justify-between rounded-xl bg-gray-50 p-4\">\r\n        {/* NOTE: Uncomment this code in Chapter 7 */}\r\n\r\n        {/* <div className=\"bg-white px-6\">\r\n          {latestInvoices.map((invoice, i) => {\r\n            return (\r\n              <div\r\n                key={invoice.id}\r\n                className={clsx(\r\n                  'flex flex-row items-center justify-between py-4',\r\n                  {\r\n                    'border-t': i !== 0,\r\n                  },\r\n                )}\r\n              >\r\n                <div className=\"flex items-center\">\r\n                  <Image\r\n                    src={invoice.image_url}\r\n                    alt={`${invoice.name}'s profile picture`}\r\n                    className=\"mr-4 rounded-full\"\r\n                    width={32}\r\n                    height={32}\r\n                  />\r\n                  <div className=\"min-w-0\">\r\n                    <p className=\"truncate text-sm font-semibold md:text-base\">\r\n                      {invoice.name}\r\n                    </p>\r\n                    <p className=\"hidden text-sm text-gray-500 sm:block\">\r\n                      {invoice.email}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <p\r\n                  className={`${lusitana.className} truncate text-sm font-medium md:text-base`}\r\n                >\r\n                  {invoice.amount}\r\n                </p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div> */}\r\n        <div className=\"flex items-center pb-2 pt-6\">\r\n          <ArrowPathIcon className=\"h-5 w-5 text-gray-500\" />\r\n          <h3 className=\"ml-2 text-sm text-gray-500 \">Updated just now</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAGA;AAAA;AAHA;;;;AAKe,eAAe,eAAe,EAC3C,cAAc,EAGf;IACC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC;0BAAE;;;;;;0BAGjE,8OAAC;gBAAI,WAAU;0BAyCb,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC,yNAAA,CAAA,gBAAa;4BAAC,WAAU;;;;;;sCACzB,8OAAC;4BAAG,WAAU;sCAA8B;;;;;;;;;;;;;;;;;;;;;;;AAKtD"}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 466, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/WINDOWS%2011/Documents/GitHub/ClientSide/Client/nextjs-dashboard/app/lib/data.ts"],"sourcesContent":["\r\nimport { sql } from '@vercel/postgres';\r\nimport {\r\n  CustomerField,\r\n  CustomersTableType,\r\n  InvoiceForm,\r\n  InvoicesTable,\r\n  LatestInvoiceRaw,\r\n  Revenue,\r\n} from './definitions';\r\nimport { formatCurrency } from './utils';\r\n\r\nconst data = await sql<LatestInvoiceRaw[]>`\r\n  SELECT invoices.amount, customers.name, customers.image_url, customers.email\r\n  FROM invoices\r\n  JOIN customers ON invoices.customer_id = customers.id\r\n  ORDER BY invoices.date DESC\r\n  LIMIT 5`;\r\n\r\nexport async function fetchRevenue() {\r\n  try {\r\n    // Artificially delay a response for demo purposes.\r\n    // Don't do this in production :)\r\n\r\n    console.log('Fetching revenue data...');\r\n    await new Promise((resolve) => setTimeout(resolve, 3000));\r\n\r\n    const data = await sql<Revenue>`SELECT * FROM revenue`;\r\n\r\n    console.log('Data fetch completed after 3 seconds.');\r\n\r\n    return data.rows;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch revenue data.');\r\n  }\r\n}\r\n\r\nexport async function fetchLatestInvoices() {\r\n  try {\r\n    const data = await sql<LatestInvoiceRaw>`\r\n      SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\r\n      FROM invoices\r\n      JOIN customers ON invoices.customer_id = customers.id\r\n      ORDER BY invoices.date DESC\r\n      LIMIT 5`;\r\n\r\n    const latestInvoices = data.rows.map((invoice) => ({\r\n      ...invoice,\r\n      amount: formatCurrency(invoice.amount),\r\n    }));\r\n    return latestInvoices;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch the latest invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchCardData() {\r\n  try {\r\n    // You can probably combine these into a single SQL query\r\n    // However, we are intentionally splitting them to demonstrate\r\n    // how to initialize multiple queries in parallel with JS.\r\n    const invoiceCountPromise = sql`SELECT COUNT(*) FROM invoices`;\r\n    const customerCountPromise = sql`SELECT COUNT(*) FROM customers`;\r\n    const invoiceStatusPromise = sql`SELECT\r\n         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\r\n         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\r\n         FROM invoices`;\r\n\r\n    const data = await Promise.all([\r\n      invoiceCountPromise,\r\n      customerCountPromise,\r\n      invoiceStatusPromise,\r\n    ]);\r\n\r\n    const numberOfInvoices = Number(data[0].rows[0].count ?? '0');\r\n    const numberOfCustomers = Number(data[1].rows[0].count ?? '0');\r\n    const totalPaidInvoices = formatCurrency(data[2].rows[0].paid ?? '0');\r\n    const totalPendingInvoices = formatCurrency(data[2].rows[0].pending ?? '0');\r\n\r\n    return {\r\n      numberOfCustomers,\r\n      numberOfInvoices,\r\n      totalPaidInvoices,\r\n      totalPendingInvoices,\r\n    };\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch card data.');\r\n  }\r\n}\r\n\r\nconst ITEMS_PER_PAGE = 6;\r\nexport async function fetchFilteredInvoices(\r\n  query: string,\r\n  currentPage: number,\r\n) {\r\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\r\n\r\n  try {\r\n    const invoices = await sql<InvoicesTable>`\r\n      SELECT\r\n        invoices.id,\r\n        invoices.amount,\r\n        invoices.date,\r\n        invoices.status,\r\n        customers.name,\r\n        customers.email,\r\n        customers.image_url\r\n      FROM invoices\r\n      JOIN customers ON invoices.customer_id = customers.id\r\n      WHERE\r\n        customers.name ILIKE ${`%${query}%`} OR\r\n        customers.email ILIKE ${`%${query}%`} OR\r\n        invoices.amount::text ILIKE ${`%${query}%`} OR\r\n        invoices.date::text ILIKE ${`%${query}%`} OR\r\n        invoices.status ILIKE ${`%${query}%`}\r\n      ORDER BY invoices.date DESC\r\n      LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\r\n    `;\r\n\r\n    return invoices.rows;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchInvoicesPages(query: string) {\r\n  try {\r\n    const count = await sql`SELECT COUNT(*)\r\n    FROM invoices\r\n    JOIN customers ON invoices.customer_id = customers.id\r\n    WHERE\r\n      customers.name ILIKE ${`%${query}%`} OR\r\n      customers.email ILIKE ${`%${query}%`} OR\r\n      invoices.amount::text ILIKE ${`%${query}%`} OR\r\n      invoices.date::text ILIKE ${`%${query}%`} OR\r\n      invoices.status ILIKE ${`%${query}%`}\r\n  `;\r\n\r\n    const totalPages = Math.ceil(Number(count.rows[0].count) / ITEMS_PER_PAGE);\r\n    return totalPages;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch total number of invoices.');\r\n  }\r\n}\r\n\r\nexport async function fetchInvoiceById(id: string) {\r\n  try {\r\n    const data = await sql<InvoiceForm>`\r\n      SELECT\r\n        invoices.id,\r\n        invoices.customer_id,\r\n        invoices.amount,\r\n        invoices.status\r\n      FROM invoices\r\n      WHERE invoices.id = ${id};\r\n    `;\r\n\r\n    const invoice = data.rows.map((invoice) => ({\r\n      ...invoice,\r\n      // Convert amount from cents to dollars\r\n      amount: invoice.amount / 100,\r\n    }));\r\n\r\n    return invoice[0];\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    throw new Error('Failed to fetch invoice.');\r\n  }\r\n}\r\n\r\nexport async function fetchCustomers() {\r\n  try {\r\n    const data = await sql<CustomerField>`\r\n      SELECT\r\n        id,\r\n        name\r\n      FROM customers\r\n      ORDER BY name ASC\r\n    `;\r\n\r\n    const customers = data.rows;\r\n    return customers;\r\n  } catch (err) {\r\n    console.error('Database Error:', err);\r\n    throw new Error('Failed to fetch all customers.');\r\n  }\r\n}\r\n\r\nexport async function fetchFilteredCustomers(query: string) {\r\n  try {\r\n    const data = await sql<CustomersTableType>`\r\n\t\tSELECT\r\n\t\t  customers.id,\r\n\t\t  customers.name,\r\n\t\t  customers.email,\r\n\t\t  customers.image_url,\r\n\t\t  COUNT(invoices.id) AS total_invoices,\r\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\r\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\r\n\t\tFROM customers\r\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\r\n\t\tWHERE\r\n\t\t  customers.name ILIKE ${`%${query}%`} OR\r\n        customers.email ILIKE ${`%${query}%`}\r\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\r\n\t\tORDER BY customers.name ASC\r\n\t  `;\r\n\r\n    const customers = data.rows.map((customer) => ({\r\n      ...customer,\r\n      total_pending: formatCurrency(customer.total_pending),\r\n      total_paid: formatCurrency(customer.total_paid),\r\n    }));\r\n\r\n    return customers;\r\n  } catch (err) {\r\n    console.error('Database Error:', err);\r\n    throw new Error('Failed to fetch customer table.');\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/WINDOWS%2011/Documents/GitHub/ClientSide/Client/nextjs-dashboard/app/dashboard/page.tsx"],"sourcesContent":["import { Card } from '@/app/ui/dashboard/cards';\r\nimport RevenueChart from '@/app/ui/dashboard/revenue-chart';\r\nimport LatestInvoices from '@/app/ui/dashboard/latest-invoices';\r\nimport { lusitana } from '@/app/ui/fonts';\r\nimport { fetchRevenue, fetchLatestInvoices, fetchCardData,} from '@/app/lib/data';\r\n\r\nexport default async function Page() {\r\n  const revenue = await fetchRevenue();\r\n  const latestInvoices = await fetchLatestInvoices();\r\n  const {\r\n    numberOfInvoices,\r\n    numberOfCustomers,\r\n    totalPaidInvoices,\r\n    totalPendingInvoices,\r\n  } = await fetchCardData();\r\n \r\n  return (\r\n    <main>\r\n      <h1 className={`${lusitana.className} mb-4 text-xl md:text-2xl`}>\r\n        Dashboard\r\n      </h1>\r\n      <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-4\">\r\n        <Card title=\"Collected\" value={totalPaidInvoices} type=\"collected\" />\r\n        <Card title=\"Pending\" value={totalPendingInvoices} type=\"pending\" />\r\n        <Card title=\"Total Invoices\" value={numberOfInvoices} type=\"invoices\" />\r\n        <Card\r\n          title=\"Total Customers\"\r\n          value={numberOfCustomers}\r\n          type=\"customers\"\r\n        />\r\n      </div>\r\n      <div className=\"mt-6 grid grid-cols-1 gap-6 md:grid-cols-4 lg:grid-cols-8\">\r\n        <RevenueChart revenue={revenue}  />\r\n        <LatestInvoices latestInvoices={latestInvoices} />\r\n      </div>\r\n    </main>\r\n  );\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AADA;;;;;;;;;;;AAGe,eAAe;IAC5B,MAAM,UAAU,MAAM,CAAA,GAAA,kHAAA,CAAA,eAAY,AAAD;IACjC,MAAM,iBAAiB,MAAM,CAAA,GAAA,kHAAA,CAAA,sBAAmB,AAAD;IAC/C,MAAM,EACJ,gBAAgB,EAChB,iBAAiB,EACjB,iBAAiB,EACjB,oBAAoB,EACrB,GAAG,MAAM,CAAA,GAAA,kHAAA,CAAA,gBAAa,AAAD;IAEtB,qBACE,8OAAC;;0BACC,8OAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,yBAAyB,CAAC;0BAAE;;;;;;0BAGjE,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,gIAAA,CAAA,OAAI;wBAAC,OAAM;wBAAY,OAAO;wBAAmB,MAAK;;;;;;kCACvD,8OAAC,gIAAA,CAAA,OAAI;wBAAC,OAAM;wBAAU,OAAO;wBAAsB,MAAK;;;;;;kCACxD,8OAAC,gIAAA,CAAA,OAAI;wBAAC,OAAM;wBAAiB,OAAO;wBAAkB,MAAK;;;;;;kCAC3D,8OAAC,gIAAA,CAAA,OAAI;wBACH,OAAM;wBACN,OAAO;wBACP,MAAK;;;;;;;;;;;;0BAGT,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,2IAAA,CAAA,UAAY;wBAAC,SAAS;;;;;;kCACvB,8OAAC,6IAAA,CAAA,UAAc;wBAAC,gBAAgB;;;;;;;;;;;;;;;;;;AAIxC"}},
    {"offset": {"line": 783, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 795, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 795, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}